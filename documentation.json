{
    "pipes": [],
    "interfaces": [
        {
            "name": "DashboardState",
            "id": "interface-DashboardState-c6dcbd8c6250d305eedaff686287ad185652bfc5984f570507215cf33fdd3430de5fcc53f078bd945beb40e01f0f3020bd20a1ef47270fde5a11df13f8e104ba",
            "file": "src/app/features/dashboard/dashboard.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { ComponentStore } from '@ngrx/component-store';\r\nimport { CryptoApiService } from '../../core/crypto-api.service';\r\nimport { interval, startWith, switchMap, tap } from 'rxjs';\r\n\r\nexport interface DashboardState {\r\n  coins: any[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\n@Injectable()\r\nexport class DashboardStore extends ComponentStore<DashboardState> {\r\n  private api = inject(CryptoApiService);\r\n\r\n  constructor() {\r\n    super({\r\n      coins: [],\r\n      loading: false,\r\n      error: null,\r\n    });\r\n    this.fetchTopCoins();\r\n  }\r\n\r\n  readonly coin$ = this.select((state) => state.coins);\r\n  readonly loading$ = this.select((state) => state.loading);\r\n  readonly error$ = this.select((state) => state.error);\r\n\r\n  readonly setLoading = this.updater((state, loading: boolean) => ({\r\n    ...state,\r\n    loading,\r\n  }));\r\n\r\n  readonly setCoins = this.updater((state, coins: any[]) => ({\r\n    ...state,\r\n    coins,\r\n    error: null,\r\n  }));\r\n\r\n  readonly setError = this.updater((state, error: string) => ({\r\n    ...state,\r\n    error,\r\n    loading: false,\r\n  }));\r\n\r\n  readonly fetchTopCoins = this.effect<void>((trigger$) =>\r\n    trigger$.pipe(\r\n      startWith(0),\r\n      tap({\r\n        next: () => {\r\n          this.setLoading(true), this.setCoins([]);\r\n        },\r\n      }),\r\n      switchMap(() =>\r\n        this.api.getTopCoins().pipe(\r\n          tap({\r\n            next: (coins) => {\r\n              this.setCoins(coins), this.setLoading(false);\r\n            },\r\n            error: () => this.setError('Unable to Load Coins'),\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "properties": [
                {
                    "name": "coins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SearchState",
            "id": "interface-SearchState-da3c575203a2e2ef7a7456ac80102e7478b9fd6a4a34173ee43c03d23ec55589fc9806b3c212e606e2f995bc73953c053c7182ee7f357e96573db4771c66b46f",
            "file": "src/app/features/search/search.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { inject } from '@angular/core';\r\nimport { ComponentStore } from '@ngrx/component-store';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs';\r\nimport { CryptoApiService } from '../../core/crypto-api.service';\r\n\r\nexport interface SearchState {\r\n  result: any[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport class SearchStore extends ComponentStore<SearchState> {\r\n  api = inject(CryptoApiService);\r\n  constructor() {\r\n    super({\r\n      result: [],\r\n      loading: false,\r\n      error: null,\r\n    });\r\n  }\r\n\r\n  results$ = this.select((state) => state.result);\r\n  loading$ = this.select((state) => state.loading);\r\n  error$ = this.select((state) => state.error);\r\n\r\n  readonly setLoading = this.updater(\r\n    (state: SearchState, loading: boolean) => ({\r\n      ...state,\r\n      loading,\r\n    })\r\n  );\r\n\r\n  readonly setError = this.updater(\r\n    (state: SearchState, error: string | null) => ({\r\n      ...state,\r\n      error,\r\n    })\r\n  );\r\n\r\n  readonly setResult = this.updater((state: SearchState, result: []) => ({\r\n    ...state,\r\n    result,\r\n  }));\r\n\r\n  readonly searchEffect = this.effect<string>((searchTerm$) =>\r\n    searchTerm$.pipe(\r\n      tap(() => console.log(searchTerm$)),\r\n      debounceTime(400),\r\n      filter((term) => !!term),\r\n      tap(() => this.setLoading(true)),\r\n      switchMap((term) =>\r\n        this.api.getCoinsBySearch(term).pipe(\r\n          tap({\r\n            next: (result) => {\r\n              this.setLoading(false);\r\n              this.setResult(result);\r\n            },\r\n            error: (error) => {\r\n              this.setLoading(false);\r\n              this.setError('Failed to search data');\r\n            },\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "CryptoApiService",
            "id": "injectable-CryptoApiService-633471ec996dcf77fee0e22d446cec651cd8e03ffcf8a05d3c8a42eda50a25b43bf6670a7d4786779f93a7ff0c3dcba73626ef2003b964d733cbb4cf3b8ef814",
            "file": "src/app/core/crypto-api.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://api.coingecko.com/api/v3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCoinHistory",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCoinsBySearch",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTopCoins",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { map, Observable, switchMap, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CryptoApiService {\r\n  private http = inject(HttpClient);\r\n  private baseUrl = 'https://api.coingecko.com/api/v3';\r\n\r\n  getTopCoins(): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/coins/markets`, {\r\n      params: {\r\n        vs_currency: 'usd',\r\n        order: 'market_cap_desc',\r\n        per_page: 10,\r\n        page: 1,\r\n      },\r\n    });\r\n  }\r\n\r\n  getCoinHistory(id: string, days: number): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/coins/${id}/market_chart`, {\r\n      params: {\r\n        vs_currency: 'usd',\r\n        days: days,\r\n      },\r\n    });\r\n  }\r\n\r\n  getCoinsBySearch(query: string): Observable<any> {\r\n    return this.http\r\n      .get(`${this.baseUrl}/search`, {\r\n        params: { query },\r\n      })\r\n      .pipe(\r\n        tap((res: any) => console.log(res)),\r\n        map((res: any) => res?.coins.map((coin: any) => coin.id)),\r\n        switchMap((ids) =>\r\n          this.http.get(`${this.baseUrl}/coins/markets`, {\r\n            params: {\r\n              vs_currency: 'usd',\r\n              order: 'market_cap_desc',\r\n              per_page: 10,\r\n              page: 1,\r\n              ids: ids.join(','),\r\n            },\r\n          })\r\n        )\r\n      );\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DashboardStore",
            "id": "injectable-DashboardStore-c6dcbd8c6250d305eedaff686287ad185652bfc5984f570507215cf33fdd3430de5fcc53f078bd945beb40e01f0f3020bd20a1ef47270fde5a11df13f8e104ba",
            "file": "src/app/features/dashboard/dashboard.store.ts",
            "properties": [
                {
                    "name": "api",
                    "defaultValue": "inject(CryptoApiService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "coin$",
                    "defaultValue": "this.select((state) => state.coins)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "error$",
                    "defaultValue": "this.select((state) => state.error)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "fetchTopCoins",
                    "defaultValue": "this.effect<void>((trigger$) =>\r\n    trigger$.pipe(\r\n      startWith(0),\r\n      tap({\r\n        next: () => {\r\n          this.setLoading(true), this.setCoins([]);\r\n        },\r\n      }),\r\n      switchMap(() =>\r\n        this.api.getTopCoins().pipe(\r\n          tap({\r\n            next: (coins) => {\r\n              this.setCoins(coins), this.setLoading(false);\r\n            },\r\n            error: () => this.setError('Unable to Load Coins'),\r\n          })\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.select((state) => state.loading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "setCoins",
                    "defaultValue": "this.updater((state, coins: any[]) => ({\r\n    ...state,\r\n    coins,\r\n    error: null,\r\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "setError",
                    "defaultValue": "this.updater((state, error: string) => ({\r\n    ...state,\r\n    error,\r\n    loading: false,\r\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "setLoading",
                    "defaultValue": "this.updater((state, loading: boolean) => ({\r\n    ...state,\r\n    loading,\r\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { ComponentStore } from '@ngrx/component-store';\r\nimport { CryptoApiService } from '../../core/crypto-api.service';\r\nimport { interval, startWith, switchMap, tap } from 'rxjs';\r\n\r\nexport interface DashboardState {\r\n  coins: any[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\n@Injectable()\r\nexport class DashboardStore extends ComponentStore<DashboardState> {\r\n  private api = inject(CryptoApiService);\r\n\r\n  constructor() {\r\n    super({\r\n      coins: [],\r\n      loading: false,\r\n      error: null,\r\n    });\r\n    this.fetchTopCoins();\r\n  }\r\n\r\n  readonly coin$ = this.select((state) => state.coins);\r\n  readonly loading$ = this.select((state) => state.loading);\r\n  readonly error$ = this.select((state) => state.error);\r\n\r\n  readonly setLoading = this.updater((state, loading: boolean) => ({\r\n    ...state,\r\n    loading,\r\n  }));\r\n\r\n  readonly setCoins = this.updater((state, coins: any[]) => ({\r\n    ...state,\r\n    coins,\r\n    error: null,\r\n  }));\r\n\r\n  readonly setError = this.updater((state, error: string) => ({\r\n    ...state,\r\n    error,\r\n    loading: false,\r\n  }));\r\n\r\n  readonly fetchTopCoins = this.effect<void>((trigger$) =>\r\n    trigger$.pipe(\r\n      startWith(0),\r\n      tap({\r\n        next: () => {\r\n          this.setLoading(true), this.setCoins([]);\r\n        },\r\n      }),\r\n      switchMap(() =>\r\n        this.api.getTopCoins().pipe(\r\n          tap({\r\n            next: (coins) => {\r\n              this.setCoins(coins), this.setLoading(false);\r\n            },\r\n            error: () => this.setError('Unable to Load Coins'),\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [
                "ComponentStore"
            ],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "SearchStore",
            "id": "class-SearchStore-da3c575203a2e2ef7a7456ac80102e7478b9fd6a4a34173ee43c03d23ec55589fc9806b3c212e606e2f995bc73953c053c7182ee7f357e96573db4771c66b46f",
            "file": "src/app/features/search/search.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { inject } from '@angular/core';\r\nimport { ComponentStore } from '@ngrx/component-store';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs';\r\nimport { CryptoApiService } from '../../core/crypto-api.service';\r\n\r\nexport interface SearchState {\r\n  result: any[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport class SearchStore extends ComponentStore<SearchState> {\r\n  api = inject(CryptoApiService);\r\n  constructor() {\r\n    super({\r\n      result: [],\r\n      loading: false,\r\n      error: null,\r\n    });\r\n  }\r\n\r\n  results$ = this.select((state) => state.result);\r\n  loading$ = this.select((state) => state.loading);\r\n  error$ = this.select((state) => state.error);\r\n\r\n  readonly setLoading = this.updater(\r\n    (state: SearchState, loading: boolean) => ({\r\n      ...state,\r\n      loading,\r\n    })\r\n  );\r\n\r\n  readonly setError = this.updater(\r\n    (state: SearchState, error: string | null) => ({\r\n      ...state,\r\n      error,\r\n    })\r\n  );\r\n\r\n  readonly setResult = this.updater((state: SearchState, result: []) => ({\r\n    ...state,\r\n    result,\r\n  }));\r\n\r\n  readonly searchEffect = this.effect<string>((searchTerm$) =>\r\n    searchTerm$.pipe(\r\n      tap(() => console.log(searchTerm$)),\r\n      debounceTime(400),\r\n      filter((term) => !!term),\r\n      tap(() => this.setLoading(true)),\r\n      switchMap((term) =>\r\n        this.api.getCoinsBySearch(term).pipe(\r\n          tap({\r\n            next: (result) => {\r\n              this.setLoading(false);\r\n              this.setResult(result);\r\n            },\r\n            error: (error) => {\r\n              this.setLoading(false);\r\n              this.setError('Failed to search data');\r\n            },\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "api",
                    "defaultValue": "inject(CryptoApiService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "error$",
                    "defaultValue": "this.select((state) => state.error)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.select((state) => state.loading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "results$",
                    "defaultValue": "this.select((state) => state.result)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "searchEffect",
                    "defaultValue": "this.effect<string>((searchTerm$) =>\r\n    searchTerm$.pipe(\r\n      tap(() => console.log(searchTerm$)),\r\n      debounceTime(400),\r\n      filter((term) => !!term),\r\n      tap(() => this.setLoading(true)),\r\n      switchMap((term) =>\r\n        this.api.getCoinsBySearch(term).pipe(\r\n          tap({\r\n            next: (result) => {\r\n              this.setLoading(false);\r\n              this.setResult(result);\r\n            },\r\n            error: (error) => {\r\n              this.setLoading(false);\r\n              this.setError('Failed to search data');\r\n            },\r\n          })\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "setError",
                    "defaultValue": "this.updater(\r\n    (state: SearchState, error: string | null) => ({\r\n      ...state,\r\n      error,\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "setLoading",
                    "defaultValue": "this.updater(\r\n    (state: SearchState, loading: boolean) => ({\r\n      ...state,\r\n      loading,\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "setResult",
                    "defaultValue": "this.updater((state: SearchState, result: []) => ({\r\n    ...state,\r\n    result,\r\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "ComponentStore"
            ],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-896b9f353f7b8eab5158a68b870349489cf217828ce47e5884285b5bc96d00b518fd17906cc0f8b15a6945cef4edf385c3e6cd45df108bbdc0203e577c5bf3eb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'crypto-tracker'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'crypto-tracker';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ChartsComponent",
            "id": "component-ChartsComponent-d321eee5cd9a7b41a496e096f737c25ccbf41d255e9842ea2516a12acc9dbf54a9ac89a7f7e42e6fb34221fe9bee1b5a2671d76a97cf624a569541132a61e7fd",
            "file": "src/app/features/charts/charts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-charts",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./charts.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-charts',\r\n  imports: [],\r\n  templateUrl: './charts.component.html',\r\n  styleUrl: './charts.component.scss'\r\n})\r\nexport class ChartsComponent {\r\n\r\n}\r\n",
            "styleUrl": "./charts.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>charts works!</p>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-5732418ac9bc53852d1483c3d56e1b38d3064816f3256e85e389b4eed845171e507406767cede1f41cceffb1b60463aa03ecac6cb3464f9d203fae8614100a80",
            "file": "src/app/features/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DashboardStore"
                },
                {
                    "name": "SearchStore"
                }
            ],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "DashboardStore",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "coin$",
                    "defaultValue": "this.searchControl.valueChanges.pipe(\r\n    startWith(''),\r\n    switchMap(\r\n      (searchTerm) =>\r\n        searchTerm?.trim().length && searchTerm?.trim().length > 3\r\n          ? this.searchStore.results$\r\n          : this.searchStore.results$\r\n      //    : if(this.store){this.store.coin$}\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['image', 'name', 'price', 'change']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "error$",
                    "defaultValue": "this.store?.error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store?.loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "searchStore",
                    "defaultValue": "inject(SearchStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshCoinDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchWithParam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, Input } from '@angular/core';\r\nimport { filter, interval, of, startWith, switchMap } from 'rxjs';\r\nimport { CryptoApiService } from '../../core/crypto-api.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { DashboardStore } from './dashboard.store';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { SearchStore } from '../search/search.store';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatProgressSpinnerModule,\r\n    MatFormFieldModule,\r\n    MatInput,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n  ],\r\n  providers: [DashboardStore, SearchStore],\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.scss',\r\n})\r\nexport class DashboardComponent {\r\n  // store = inject(DashboardStore);\r\n  searchStore = inject(SearchStore);\r\n  searchControl = new FormControl('');\r\n\r\n  @Input() store?: DashboardStore;\r\n\r\n  constructor() {\r\n    this.store ??= inject(DashboardStore); // fallback only if not passed via Storybook\r\n  }\r\n\r\n  coin$ = this.searchControl.valueChanges.pipe(\r\n    startWith(''),\r\n    switchMap(\r\n      (searchTerm) =>\r\n        searchTerm?.trim().length && searchTerm?.trim().length > 3\r\n          ? this.searchStore.results$\r\n          : this.searchStore.results$\r\n      //    : if(this.store){this.store.coin$}\r\n    )\r\n  );\r\n  loading$ = this.store?.loading$;\r\n  error$ = this.store?.error$;\r\n\r\n  displayedColumns = ['image', 'name', 'price', 'change'];\r\n\r\n  ngOnInit() {\r\n    this.searchWithParam();\r\n  }\r\n\r\n  refreshCoinDetails() {\r\n    console.log('Button clicked');\r\n    if (\r\n      this.searchControl?.value &&\r\n      this.searchControl?.value?.trim().length > 3\r\n    ) {\r\n      this.searchStore.searchEffect(of(this.searchControl.value));\r\n    } else {\r\n      this.store?.fetchTopCoins();\r\n    }\r\n  }\r\n\r\n  onClear() {\r\n    this.searchControl.setValue('');\r\n    this.store?.fetchTopCoins();\r\n  }\r\n\r\n  searchWithParam() {\r\n    this.searchStore.searchEffect(\r\n      this.searchControl.valueChanges.pipe(\r\n        filter((value): value is string => value !== null)\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "extends": [],
            "templateData": "<mat-card>\r\n  <h2>📈 Live Market (Top 10)</h2>\r\n  <ng-container *ngIf=\"loading$ | async\">\r\n    <mat-spinner></mat-spinner>\r\n  </ng-container>\r\n  <div class=\"search-refresh-row\">\r\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n      <mat-label>Search Cryptos</mat-label>\r\n      <input matInput [formControl]=\"searchControl\" placeholder=\"e.g. bitcoin, ethereum\" />\r\n      <button *ngIf=\"searchControl.value\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"onClear()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <div class=\"actions\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"refreshCoinDetails()\" data-testid=\"refresh-btn\">\r\n        <mat-icon>refresh</mat-icon>\r\n        Refresh Coins\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <ng-container *ngIf=\"(coin$ | async) as coins\">\r\n    <table mat-table [dataSource]=\"coins\" class=\"mat-elevation-z4\">\r\n\r\n      <!-- Logo -->\r\n      <ng-container matColumnDef=\"image\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let coin\">\r\n          <img [src]=\"coin.image\" width=\"24\" />\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Name -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef>Name</th>\r\n        <td mat-cell *matCellDef=\"let coin\">{{ coin.name }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Price -->\r\n      <ng-container matColumnDef=\"price\">\r\n        <th mat-header-cell *matHeaderCellDef>Price (USD)</th>\r\n        <td mat-cell *matCellDef=\"let coin\">${{ coin.current_price | number: '1.2-2' }}</td>\r\n      </ng-container>\r\n\r\n      <!-- 24h Change -->\r\n      <ng-container matColumnDef=\"change\">\r\n        <th mat-header-cell *matHeaderCellDef>24h %</th>\r\n        <td mat-cell *matCellDef=\"let coin\">\r\n          <span [style.color]=\"coin.price_change_percentage_24h >= 0 ? 'green' : 'red'\">\r\n            {{ coin.price_change_percentage_24h | number: '1.2-2' }}%\r\n          </span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n    </table>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"(error$ | async) as error\">\r\n    <p style=\"color: red;\">{{ error }}</p>\r\n  </ng-container>\r\n</mat-card>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SearchInputComponent",
            "id": "component-SearchInputComponent-f2715fbb32d42c7cab25e75ec71d603eae38a83ba769b9c68e04dfd52ca5c0db0e7d1b710d6c5ddcfbaa337668a1c949a9c8181dabe45a7f8328053bbc1a1e57",
            "file": "src/app/features/search/search-input/search-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-search-input',\r\n  imports: [],\r\n  templateUrl: './search-input.component.html',\r\n  styleUrl: './search-input.component.scss'\r\n})\r\nexport class SearchInputComponent {\r\n\r\n}\r\n",
            "styleUrl": "./search-input.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>search-input works!</p>\r\n"
        },
        {
            "name": "ShellComponent",
            "id": "component-ShellComponent-7df30496706aa5cdde8e3157f3e1297c401461d55e91314732aa2bd272ab58d2e15bec92fe6aab2bb3697ef9d36f1fc61f49fca2e338e78514b35ab1912cbe10",
            "file": "src/app/layout/shell/shell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shell",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./shell.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { RouterOutlet } from '@angular/router';\r\n@Component({\r\n  selector: 'app-shell',\r\n  imports: [MatToolbarModule, RouterOutlet],\r\n  templateUrl: './shell.component.html',\r\n  styleUrl: './shell.component.scss',\r\n})\r\nexport class ShellComponent {}\r\n",
            "styleUrl": "./shell.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-toolbar color=\"primary\">\r\n  <span>Crypto Tracker Dashboard</span>\r\n</mat-toolbar>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "WatchlistComponent",
            "id": "component-WatchlistComponent-9c0ce4a006d3f52d0212225ee198c22ae89586bc427345f321855bd40e0e77bd5e67eea6a957ebca5bb919c8c499fc255bbfef83071c057ee1aacc9acc9b3f1c",
            "file": "src/app/features/watchlist/watchlist.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-watchlist",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./watchlist.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-watchlist',\r\n  imports: [],\r\n  templateUrl: './watchlist.component.html',\r\n  styleUrl: './watchlist.component.scss'\r\n})\r\nexport class WatchlistComponent {\r\n\r\n}\r\n",
            "styleUrl": "./watchlist.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>watchlist works!</p>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(),\r\n  ],\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(),\r\n  ],\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/crypto-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CryptoApiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/charts/charts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardStore",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search-input/search-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search.store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SearchStore",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/search/search.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/watchlist/watchlist.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WatchlistComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/shell/shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}